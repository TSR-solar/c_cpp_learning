/*
一个表达式是一系列运算符和算子的组合，用来计算一个值；
运算符是指进行运算的动作；
算子是指参与运算的值，这个值可能是常数，也可能是变量，还可能是一个方法的返回值；

运算符有很多种，比如 + - * / % 都是运算符；
当多个运算符出现在同一个表达式中时，是如何进行运算的呢？
类似于“先乘除，后加减”，运算符之间也有优先级，用1，2，3...表示，数字小的优先级高；
下面是一些运算符的优先级：
优先级         运算符         运算         结合关系         举例
  1              ()           括号         自左向右         a*（b+c）
  2               +         单目不变       自右向左         a*+b
  2               -         单目取负       自右向左         a*-b
  2              ++           自增         自右向左         a++
  2              --           自减         自右向左         a--
  3               *            乘          自左向右         a*b
  3               /            除          自左向右         a/b
  3               %           取余         自左向右         a%b
  4               +            加          自左向右         a+b
  4               -            减          自左向右         a-b
  14              =           赋值         自右向左         a=b
  14             +=         加法赋值       自右向左         a+=b
  14             -=         减法赋值       自右向左         a-=b
  14             *=         乘法赋值       自右向左         a*=b
  14             /=         除法赋值       自右向左         a/=b
  14             %=         取余赋值       自右向左         a%=b

――单目不变和单目取负是指对它右边的数不变或取负；
――如 a*-b ，即a乘以b的相反数；
――因此它们的优先级最高；

――单目运算符指只有一个算子的运算符，此外还有双目和三目运算符；
――一般来说，单目运算符的优先级更高；

――结合关系是当优先级相等时运算的顺序；例：
―― a/b*c即为a/b后，再乘以c；
―― --a即-(-a)，因为单目取负结合关系为自右向左；
―― a=b=c 即先把c的值赋给b，再把b的值赋给a，因为单目取负结合关系为自右向左；
――优先级一致的运算符结合关系也相同；

――此外，还有复合赋值和自增自减运算符；
――赋值运算符包含 += -= *= /= ，它们的作用是快速将变量变成新的值；
――如 a+=1 ，等价于 a = a + 1 ；
――另外，要注意的是，*=和/=在使用时，由于运算优先级，会先将右边的结果算完再赋值；
――如 a *= 6+12 等价于 a *=(6+12) 等价于 a = a * (6+12);

――自增自减运算符可快速将变量的值变化1；
――如 a++ 等价于 a+=1 等价于 a = a + 1 ：
――此外，又有 a++ 和 ++a 两种表达方式；
――a++的值是a加1以前的值，而++a的值是加了1以后的值；
――无论哪个，a自己的值都加了1了；
*/
//具体，可以看下面的例子：
#include <stdio.h>
int main()
{
	int a = 1;
	printf("a=%d\n", a);
	printf("a++=%d\n", a++);
	a = 1;
	printf("++a=%d\n",++a);
	return 0;
}
/*
可以看到，表达式中++a=2，但a++=1；
这就是因为++a先把值赋给了a再参与运算；
而a++先参与运算再赋值；
故 a++ =1；但此时a的值已经是2了；
*/

/*
另外，表达式在使用时应该尽量简便；
应避免使用复杂的表达式，而是拆成多个简单的，便于我们理解。
*/