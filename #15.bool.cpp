/*
bool来啦！！！
但它是不安全的。
*/
//为了安全的使用它，我们要在代码的开头加上：
#include <stdbool.h>

/*
我更有兴趣的是一些运算符；
逻辑运算符，条件运算符，逗号运算符。
逻辑运算符如下：
优先级         运算符         运算         结合关系         举例
  2				 !			 逻辑非		   从右向左			!a
  11			 &&			 逻辑与		   从左向右         a&&b
  12			 ||			 逻辑或		   从左向右			a||b
*/

/*
逻辑运算符主要检测其附近的表达式的值是否为0；
对于逻辑与，只有两边的表达式结果均不为0时，才输出1；若有一个是0，则输出0；
对于逻辑或，只要两边的表达式有一个结果不是0，就输出1；只有两个均是0时才输出0；
对于逻辑非，它右边的表达式结果为0则输出1；不为0则输出0；

例如 2&&0=0；3||0=1；!4=0；
*/

/*
注意：计算机在进行&&和||的运算时，若左边边的值足以判定结果为1还是0时，就不会看右边了！
这种情况被称为短路。
对于&&，左边是0时就不做右边了；
对于||，左边是非0时就不做右边了；
*/
//具体可以看下面的例子：
#include <stdio.h>
int main()
{
	int a = 1;
	int b = 0;
	int c;
	c = a==0 && b+=1;
	printf("%d\n", b);
	return 0;
}
/*
可以看到b的值仍然为0，b+=1并没有执行；
为了避免短路，应该避免在逻辑运算中插入赋值运算；
*/

/*
条件运算符；
它是唯一的三目运算符，其实也非常简单；
格式如下：a?b:c;
可翻译为判断a是否成立，若是，进行b；若否，进行c；
作为运算符，它的运算优先级为13，仅仅高于一系列赋值运算符；
*/

/*
逗号运算符；
逗号用来连接两个表达式，并以其右边的表达式的值作为它的结果。
逗号的优先级是所有的运算符中最低的，所以它两边的表达式会先计算；逗号的组合关系是自左向右，
所以左边的表达式会先计算，而右边的表达式的值就留下来作为逗号运算的结果。
*/